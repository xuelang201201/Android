package cn.tedu.chat;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

/**
 * 聊天室的服务端程序
 */
public class ChatServer {
	
	private List<Socket> sockets;
	
	/**
	 * 启动群聊服务
	 * @throws IOException 
	 */
	public void startServer() throws IOException {
		ServerSocket ss = new ServerSocket(8000);
		sockets = new ArrayList<Socket>();
		while (true) {
			Socket socket = ss.accept();
			System.out.println(socket.getInetAddress());
			sockets.add(socket);
			// 启动线程，并发处理多个客户端的请求
			new WorkThread(socket).start();
		}
	}
	
	/**
	 * 工作线程：
	 * 不断读取客户端发送的消息，然后给当前在线的的每个用户都重新发送一遍
	 */
	class WorkThread extends Thread {

		private Socket socket;
		public WorkThread(Socket socket) {
			this.socket = socket;
		}
		
		@Override
		public void run() {
			try {
				DataInputStream dis = new DataInputStream(socket.getInputStream());
				while (true) {
					String message = dis.readUTF();
					// 把消息给每个客户端都发一遍
					for (int i = 0; i < sockets.size(); i++) {
						Socket s = sockets.get(i);
						DataOutputStream dos = new DataOutputStream(s.getOutputStream());
						dos.writeUTF(message);
						dos.flush();
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
				// 把已经关闭的socket对象从集合中移除
				sockets.remove(socket);
			}
		}
	}
	
	public static void main(String[] args) {
		try {
			ChatServer server = new ChatServer();
			System.out.println("服务已启动...");
			server.startServer();//启动
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
